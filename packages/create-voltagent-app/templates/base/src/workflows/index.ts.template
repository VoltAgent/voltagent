import { Agent, createWorkflowChain, andThen, andAgent, andAll, andRace, andWhen } from "@voltagent/core";
import { VercelAIProvider } from "@voltagent/vercel-ai";
import { openai } from "@ai-sdk/openai";
import { z } from "zod";

// This agent is specific to the sentiment analysis task within the workflow.
const sentimentAgent = new Agent({
  name: "SentimentAnalysisAgent",
  instructions: "You are an expert in sentiment analysis. Analyze the text and determine if the sentiment is positive, negative, or neutral. Respond only with the identified sentiment.",
  llm: new VercelAIProvider(),
  model: openai("gpt-4o-mini"),
});

export const comprehensiveWorkflow = createWorkflowChain({
  id: "comprehensive-workflow",
  name: "Comprehensive Workflow Example",
  purpose: "Demonstrates all major workflow steps in a single flow.",
  input: z.object({
    text: z.string(),
  }),
  result: z.object({
    processedText: z.string(),
    sentiment: z.string(),
    calculations: z.array(z.object({
      operation: z.string(),
      value: z.number()
    })),
    raceWinner: z.string(),
    warning: z.string().optional(),
  }),
})
  // Step 1: andThen - Basic data transformation
  .andThen({
    id: "preprocess-text",
    execute: async (data) => ({
      processedText: data.text.trim().toLowerCase(),
    }),
  })
  // Step 2: andAgent - AI-powered analysis
  .andAgent(
    (data) => `Analyze the sentiment of this text: "${data.processedText}"`,
    sentimentAgent,
    {
      schema: z.object({
        sentiment: z.enum(["positive", "negative", "neutral"]),
      }),
    }
  )
  // Step 3: andAll - Run multiple operations in parallel
  .andAll({
    id: "run-calculations",
    steps: [
      andThen({
        id: "word-count",
        execute: async (data) => ({
          operation: "word_count",
          value: data.processedText.split(" ").length,
        }),
      }),
      andThen({
        id: "char-count",
        execute: async (data) => ({
          operation: "char_count",
          value: data.processedText.length,
        }),
      }),
    ],
  })
  .andThen({
    id: "format-calculations",
    execute: async (data: any) => ({
      calculations: data,
    }),
  })
  // Step 4: andRace - Get the result from the fastest source
  .andRace({
    id: "compete-services",
    steps: [
      andThen({
        id: "fast-service",
        execute: async () => {
          await new Promise((resolve) => setTimeout(resolve, 50));
          return { raceWinner: "fast-service" };
        },
      }),
      andThen({
        id: "slow-service",
        execute: async () => {
          await new Promise((resolve) => setTimeout(resolve, 100));
          return { raceWinner: "slow-service" };
        },
      }),
    ],
  })
  // Step 5: andWhen - Conditional execution
  .andWhen({
    id: "check-for-negative-sentiment",
    condition: async (data) => data.sentiment === "negative",
    step: andThen({
      id: "add-warning",
      execute: async (data) => ({
        ...data,
        warning: "Negative sentiment detected!",
      }),
    }),
  }); 