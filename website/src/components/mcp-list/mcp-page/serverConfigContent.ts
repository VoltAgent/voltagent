import type { SVGProps } from "react";

// Defines the structure for individual pieces of content (text, code, heading)
export interface ServerConfigContentItem {
  type: "text" | "code" | "heading";
  value: string; // Main content (text, code string, or paragraph for heading)
  title?: string; // Optional title for a step or heading text
  language?: string; // Optional language for code blocks (e.g., 'json', 'python', 'bash')
}

// Defines the configuration structure for a specific nested tab (Voltagent, Cursor, Claude)
// Voltagent can be a simple string (JSON config) or structured content.
export type NestedTabConfig = string | ServerConfigContentItem[];

// New interface for server generation instructions
export interface ServerGenerationInfo {
  urlTemplate?: string; // e.g., "https://www.gumloop.com/mcp/{mcpname}" - Now optional
  mcpNameValue?: string; // The actual value for {mcpname}, defaults to "ahrefs"
  promptTextBeforeLink?: string; // Text before the link
  linkText?: string; // Text for the hyperlink itself, defaults to "Generate your server URL" - Now optional
  promptTextAfterLink?: string; // Text after the link
}

// Defines the server configurations for a single main provider (e.g., Gumloop)
export interface ProviderServerConfig {
  voltagent?: NestedTabConfig; // Optional: if not present, main page's default config for Voltagent may be used
  cursor: ServerConfigContentItem[];
  claude: ServerConfigContentItem[];
  serverGenerationInfo?: ServerGenerationInfo; // Added new field
}

// Main object holding configurations for all providers
export const providerServerConfigs: {
  [providerId: string]: ProviderServerConfig;
} = {
  zapier: {
    // Voltagent: (Defaults to currentTab.serverConfig from tabOptions if not specified here)
    cursor: [
      {
        type: "heading",
        title: "Authenticating Zapier MCP with Cursor",
        value: "",
      },
      {
        type: "text",
        value:
          "To use the Zapier MCP with Cursor, ensure your Zapier server is running and accessible. Then, configure Cursor to point to your Zapier MCP endpoint.",
      },
      {
        type: "text",
        title: "Add MCP Server in Cursor",
        value:
          "Go to Cursor Settings > MCP > Add a new global MCP Server. Add your Zapier MCP server details, typically the URL where your Zapier MCP is hosted.",
      },
      {
        type: "code",
        language: "json",
        value: JSON.stringify(
          {
            mcpServers: {
              "zapier-mcp": {
                url: "<YOUR_ZAPIER_MCP_SERVER_URL>",
              },
            },
          },
          null,
          2,
        ),
      },
      {
        type: "text",
        title: "Use in Agent Mode",
        value:
          "Once connected, you can interact with your Zapier actions via Cursor in Agent mode.",
      },
    ],
    claude: [
      {
        type: "heading",
        title: "Using Zapier MCP with Claude",
        value: "",
      },
      {
        type: "heading",
        title: "Configure Your Actions & Copy URL",
        value: "",
      },
      {
        type: "text",
        value:
          "Choose which actions you want Claude Desktop to access. Use the following MCP URL in Claude Integrations:",
      },
      {
        type: "code",
        language: "text",
        value: "https://actions.zapier.com/mcp/sse",
      },
      {
        type: "heading",
        title: "Connect to Claude",
        value: "",
      },
      {
        type: "text",
        value:
          "Configure Claude to use Zapier MCP to access your actions. Go to Settings > Integrations > Add more and paste the URL above.",
      },
    ],
    serverGenerationInfo: {
      urlTemplate: "https://actions.zapier.com/mcp/{mcpname}",
      mcpNameValue: "sse",
      promptTextBeforeLink: "For Zapier:",
      linkText: "Open Zapier MCP Actions",
      promptTextAfterLink: "and configure your actions for Claude to access.",
    },
  },

  composio: {
    // Provide a specific Voltagent config for Composio that matches the screenshot
    voltagent: JSON.stringify(
      {
        serverName: "Ahrefs",
        serverType: "mcp",
        provider: "Composio",
        configuration: {
          baseURL: "https://api.ahrefs.com/",
          apiKey: "YOUR_API_KEY_HERE",
          maxTokens: 4096,
          temperature: 0.7,
        },
      },
      null,
      2,
    ),
    cursor: [
      {
        type: "heading",
        title: "Authenticating Composio MCP with Cursor",
        value: "",
      },
      {
        type: "text",
        title: "Generate Configuration",
        value:
          "Visit mcp.composio.dev to generate your custom Composio MCP configuration.",
      },
      {
        type: "text",
        title: " Install MCP Tools",
        value:
          "Paste the `npx` command generated by mcp.composio.dev into your terminal.",
      },
      {
        type: "text",
        title: "Verify Installation",
        value:
          "Open Cursor settings and navigate to **MCP** to confirm the MCP servers are installed.",
      },
    ],
    claude: [
      {
        type: "heading",
        title: "Authenticating Composio MCP with Claude",
        value: "",
      },
      {
        type: "text",
        title: "Setup Steps",
        value:
          "Visit mcp.composio.dev to generate your custom Composio MCP configuration.",
      },
      {
        type: "text",
        value: "Install the configuration using the generated command.",
      },
      {
        type: "text",
        value: "Restart Claude Desktop and verify by checking the tools icon.",
      },
    ],
    serverGenerationInfo: {
      urlTemplate: "https://mcp.composio.dev/{mcpname}",
      mcpNameValue: "ahrefs", // As per user request context
      promptTextBeforeLink: "For Composio:",
      linkText: "Generate your Composio MCP URL",
      promptTextAfterLink:
        "and then use the configuration details shown in the tabs below.",
    },
  },
};

// These are no longer needed as static exports if all content is in providerServerConfigs
// export const claudeTabContent: ServerConfigContentItem[] = [...];
// export const cursorTabContent: ServerConfigContentItem[] = [...];

// Tab options for filtering
export interface TabOption {
  id: string;
  name: string;
  serverConfig: string;
  tools?: {
    id: string;
    name: string;
    description: string;
    inputs?: {
      name: string;
      type: string;
      required: boolean;
      description: string;
    }[];
  }[];
}
