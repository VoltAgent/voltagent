[
{
  "id": 1,
  "slug": "hr-agent",
  "title": "HR Agent",
  "category": "hr",
  "icon": "UserGroupIcon",
  "navTitle": "HR Agent",
  "navDescription": "Build HR agents to streamline recruiting, onboarding, and employee support",
  "hero": {
    "headline": "Build Custom HR Agents in TypeScript",
    "subtext": "Automate HR workflows from recruiting to offboarding. Connect to your HR stack and keep everything observable in VoltOps.",
    "primaryCTA": "Start Building",
    "primaryCTALink": "/docs/",
    "secondaryCTA": "View Examples",
    "secondaryCTALink": "https://github.com/voltagent/voltagent/tree/main/examples",
    "businessTopics": [
      "Recruiting",
      "Onboarding",
      "Employee Support"
    ],
    "systemCapabilities": [
      "HRIS",
      "Knowledge Base",
      "Policy Engine"
    ]
  },
  "painPoints": [
    "Manual HR workflows slow down recruiting and onboarding",
    "Generic HR chatbots cannot handle company-specific policies",
    "Expensive SaaS platforms charge per employee and limit customization",
    "Lack of visibility into HR processes and compliance tracking"
  ],
  "solutions": [
    "Code recruiting and onboarding logic directly in TypeScript",
    "Use your own policies, compliance rules, and knowledge base",
    "Run agents in your stack to control costs and data",
    "Get full observability with VoltOps across HR workflows"
  ],
  "features": [
    {
      "title": "Recruiting Automation",
      "description": "Automate application intake, screening, and interview scheduling with VoltAgent workflows.",
      "icon": "BriefcaseIcon"
    },
    {
      "title": "Onboarding Agents",
      "description": "Guide new employees through document collection, training, and account setup.",
      "icon": "ClipboardDocumentCheckIcon"
    },
    {
      "title": "Employee Support",
      "description": "Answer payroll, PTO, and benefits questions from your HR knowledge base.",
      "icon": "ChatBubbleLeftRightIcon"
    },
    {
      "title": "Policy & Compliance",
      "description": "Enforce company policies, track compliance, and generate audit-ready reports.",
      "icon": "ShieldCheckIcon"
    }
  ],
  "exampleAgents": [
    {
      "name": "Recruiting Pipeline Agent",
      "description": "Manages applications, schedules interviews, and keeps candidates updated."
    },
    {
      "name": "Employee Onboarding Agent",
      "description": "Collects documents, sets up accounts, assigns training, and tracks completion."
    },
    {
      "name": "Payroll & Benefits Agent",
      "description": "Answers salary, PTO, and benefits-related questions using verified data."
    },
    {
      "name": "Compliance Monitoring Agent",
      "description": "Tracks legal requirements, labor laws, and company-specific policies."
    },
    {
      "name": "Exit & Offboarding Agent",
      "description": "Coordinates exit interviews, asset returns, and access removals."
    }
  ],
  "capabilities": [
    "Manage recruiting pipelines (applications, screening, scheduling)",
    "Automate employee onboarding (accounts, docs, training setup)",
    "Retrieve HR policies and compliance docs",
    "Answer payroll, benefits, and PTO questions",
    "Support employees across multiple channels (Slack, email, portal)",
    "Maintain long-term employee records with context",
    "Automate performance review cycles and feedback collection",
    "Track compliance with labor laws and company policies",
    "Generate HR analytics and reporting (attrition, hiring time, engagement)",
    "Detect churn risk signals and recommend retention actions",
    "Route sensitive issues (harassment, legal risk) to HR securely",
    "Handle multi-region policies (local tax, vacation rules, regulations)",
    "Support training & development (recommend courses, track completion)",
    "Manage internal mobility (role changes, promotions, transfers)",
    "Coordinate offboarding workflows (exit interviews, asset return)",
    "Enforce role-based access and security in HR workflows"
  ],
  "howItWorks": [
    { "step": 1, "title": "Build with VoltAgent", "description": "Build your HR workflows and policies in TypeScript." },
    { "step": 2, "title": "Connect data & tools", "description": "Integrate HRIS, payroll, compliance systems, and vector DBs for knowledge retrieval." },
    { "step": 3, "title": "Add memory & RAG", "description": "Index employee docs, past tickets, and policies for accurate answers." },
    { "step": 4, "title": "Observe in VoltOps", "description": "Trace HR workflows, tool calls, tokens, and decisions with full visibility." }
  ],
  "supervisorFlow": {
    "enabled": true,
    "title": "How HR Supervisor Routes Employee Requests",
    "subtitle": "Employee request flows through HR Supervisor to specialized agents and HR systems",
    "agents": [
      { "id": "recruiting", "label": "Recruiting Agent", "sublabel": "Hiring", "icon": "BriefcaseIcon" },
      { "id": "onboarding", "label": "Onboarding Agent", "sublabel": "Setup", "icon": "ClipboardDocumentCheckIcon" },
      { "id": "benefits", "label": "Benefits Agent", "sublabel": "Payroll", "icon": "CurrencyDollarIcon" }
    ],
    "tools": [
      { "id": "hris", "label": "HRIS", "sublabel": "Employee Data", "icon": "ServerStackIcon" },
      { "id": "policies", "label": "Policy Engine", "sublabel": "Compliance", "icon": "ShieldCheckIcon" }
    ]
  }
},
{
  "id": 2,
  "slug": "customer-support-agent",
  "title": "Customer Support Agent",
  "category": "support",
  "icon": "ChatBubbleLeftRightIcon",
  "navTitle": "Customer Support Agent",
  "navDescription": "Build custom support agents with TypeScript",
  "hero": {
    "headline": "Build Custom Support Agents in TypeScript",
    "subtext": "Build agents that match your workflows and solve real customer issues. Connect to your stack and keep everything observable in VoltOps.",
    "primaryCTA": "Start Building",
    "primaryCTALink": "/docs/",
    "secondaryCTA": "View Examples",
    "secondaryCTALink": "https://github.com/voltagent/voltagent/tree/main/examples",
    "businessTopics": [
      "Billing",
      "Account question",
      "Bug"
    ],
    "systemCapabilities": [
      "Knowledge Base",
      "CRM System",
      "Escalation"
    ]
  },
  "painPoints": [
    "No-code chatbots break with complex business logic",
    "SaaS platforms charge per conversation and limit customization",
    "Black-box AI can't explain or justify answers",
    "Generic bots don't understand your products or policies"
  ],
  "solutions": [
    "Write real support logic in TypeScript (triage, routing, escalation, SLAs)",
    "Run in your own stack and control your cost profile",
    "VoltOps gives end-to-end traces of every tool call and decision",
    "Agents use your KB, policies, and systems—not generic prompts"
  ],
  "features": [
    {
      "title": "Full Code Control",
      "description": "Implement multi-step workflows, policy checks, and SLA logic in TypeScript—no flowchart limits.",
      "icon": "CodeBracketIcon"
    },
    {
      "title": "Integrate Any System",
      "description": "Connect CRM, ticketing, billing, logistics, or internal APIs via code. No vendor waitlists.",
      "icon": "ServerStackIcon"
    },
    {
      "title": "Memory & Policy Awareness",
      "description": "Maintain conversation state, retrieve from KB/vector DBs, and enforce policies deterministically.",
      "icon": "CircleStackIcon"
    },
    {
      "title": "VoltOps Observability",
      "description": "Trace decisions, tokens, tool calls, and latency. Debug like regular code and ship with confidence.",
      "icon": "ChartBarIcon"
    }
  ],
  "exampleAgents": [
    {
      "name": "Enterprise Technical Support Agent",
      "description": "Diagnoses API errors, inspects logs, validates auth/quotas, and proposes code-level fixes with escalation rules."
    },
    {
      "name": "E-commerce Service Agent",
      "description": "Looks up orders, creates returns, checks inventory/shipments, and applies policy-based resolutions."
    },
    {
      "name": "Multi-Tier Escalation Agent",
      "description": "Routes by sentiment, priority, ACV, and SLA risk; hands off with structured context for humans."
    },
    {
      "name": "Billing & Refunds Agent",
      "description": "Resolves payment issues, calculates pro-rated refunds, applies credits, and syncs with your billing provider."
    },
    {
      "name": "Account & Access Agent",
      "description": "Handles account updates, role/permission changes, SSO/SAML troubleshooting, and security checks."
    },
    {
      "name": "Knowledge Answering Agent",
      "description": "Finds verified answers from your knowledge base and past tickets; cites sources and policies."
    },
    {
      "name": "Bug Triage Agent",
      "description": "Extracts repro steps, attaches logs, classifies severity, and files clean issues for engineering."
    },
    {
      "name": "Proactive Retention Agent",
      "description": "Detects churn risk signals, offers tailored retention actions, and schedules follow-ups."
    }
  ],
  "capabilities": [
    "Triage tickets across chat, email, Slack",
    "Execute actions in CRMs, ticketing, billing, and logistics",
    "Retrieve verified answers from KB and policies",
    "Apply deterministic guardrails and audit every decision",
    "Operate in multiple languages and channels"
  ],
  "howItWorks": [
    { "step": 1, "title": "Build with VoltAgent", "description": "Build your support workflows and policies in TypeScript." },
    { "step": 2, "title": "Connect data & tools", "description": "Wire CRM, ticketing, billing, logistics, and vector DBs (Chroma/Pinecone/Qdrant)." },
    { "step": 3, "title": "Add memory & RAG", "description": "Index KB, past tickets, and product docs for grounded, consistent answers." },
    { "step": 4, "title": "Observe in VoltOps", "description": "Trace decisions, tool calls, tokens, and latency; run evals and apply guardrails." }
  ],
  "supervisorFlow": {
    "enabled": true,
    "title": "How Supervisor Routes Support Requests",
    "subtitle": "User request flows to the Supervisor, then to specialized agents and tools (KB/CRM), with results written to memory and returned to the user.",
    "agents": [
      { "id": "billing", "label": "Billing Agent", "sublabel": "Payment", "icon": "CreditCardIcon" },
      { "id": "account", "label": "Account Agent", "sublabel": "User Info", "icon": "QuestionMarkCircleIcon" },
      { "id": "bug", "label": "Bug Triager", "sublabel": "Issues", "icon": "BugAntIcon" }
    ],
    "tools": [
      { "id": "kb", "label": "KB Search", "sublabel": "Knowledge", "icon": "BookOpenIcon" },
      { "id": "crm", "label": "CRM", "sublabel": "Customer Data", "icon": "BuildingLibraryIcon" }
    ]
  }
},

  
    {
      "id": 3,
      "slug": "sales-teams",
      "title": "Sales Teams",
      "category": "sales",
      "icon": "UserGroupIcon",
      "navTitle": "Sales Teams",
      "navDescription": "Qualify leads and automate sales workflows",
      "hero": {
        "headline": "Build Custom Sales Agents in TypeScript",
        "subtext": "Automate lead qualification, research, and outreach with agents you control. Connect to your CRM and track everything in VoltOps.",
        "primaryCTA": "Start Building",
        "primaryCTALink": "/docs/",
        "secondaryCTA": "View Examples",
        "secondaryCTALink": "https://github.com/voltagent/voltagent/tree/main/examples",
        "businessTopics": ["Lead qualification", "Sales research", "Outreach"],
        "systemCapabilities": ["CRM System", "Enrichment APIs", "Policy Engine"]
      },
      "painPoints": [
        "Leads are not qualified consistently across teams",
        "Reps spend too much time on manual research and data entry",
        "Generic sales bots cannot follow your playbooks",
        "Little visibility into why a lead was scored or routed"
      ],
      "solutions": [
        "Code your own scoring, routing, and outreach logic in TypeScript",
        "Connect CRM, enrichment, and intent data sources",
        "Run in your stack for cost control and data ownership",
        "Use VoltOps to audit every score, route, and message"
      ],
      "features": [
        {
          "title": "Custom Scoring Logic",
          "description": "Define ICP rules, intent signals, and thresholds in code.",
          "icon": "ChartBarIcon"
        },
        {
          "title": "Data Enrichment",
          "description": "Pull firmographic and technographic data from any API.",
          "icon": "ServerStackIcon"
        },
        {
          "title": "Outbound Automations",
          "description": "Trigger email/DM sequences and hand off to reps with context.",
          "icon": "PaperAirplaneIcon"
        },
        {
          "title": "Full Observability",
          "description": "Trace why a lead was scored or routed with VoltOps.",
          "icon": "EyeIcon"
        }
      ],
      "exampleAgents": [
        {
          "name": "Lead Qualification Agent",
          "description": "Scores leads by ICP, intent, and engagement; updates CRM fields."
        },
        {
          "name": "Company Research Agent",
          "description": "Finds tech stack, hiring signals, and key contacts before outreach."
        },
        {
          "name": "Prospecting Outreach Agent",
          "description": "Drafts tailored emails, schedules follow-ups, and logs results."
        },
        {
          "name": "Account Routing Agent",
          "description": "Routes by territory, segment, ACV, and rep workload."
        },
        {
          "name": "PQL/Usage Agent",
          "description": "Detects product-qualified signals and alerts the right owner."
        },
        {
          "name": "Renewal & Expansion Agent",
          "description": "Surfaces upsell paths based on usage, tickets, and roadmap fit."
        }
      ],
      "capabilities": [
        "Score leads with custom rules and ML signals",
        "Enrich contacts from multiple data sources",
        "Generate tailored outreach and follow-ups",
        "Route accounts by region, segment, or priority",
        "Sync activities and fields back to CRM",
        "Track conversion metrics and bottlenecks",
        "Detect buying signals from product usage",
        "Coordinate handoffs to AEs with full context",
        "Guardrail compliance for messaging and privacy",
        "Run A/B tests on sequences and scoring",
        "Support multi-language outreach",
        "Explain each score and route with VoltOps traces"
      ],
      "howItWorks": [
        {
          "step": 1,
          "title": "Build with VoltAgent",
          "description": "Implement scoring, research, and outreach logic in TypeScript."
        },
        {
          "step": 2,
          "title": "Connect Data & Tools",
          "description": "Integrate CRM, enrichment, email, and analytics systems."
        },
        {
          "step": 3,
          "title": "Add Memory & RAG",
          "description": "Index playbooks, personas, and case studies for better messaging."
        },
        {
          "step": 4,
          "title": "Observe in VoltOps",
          "description": "Audit scores, routes, and outcomes; iterate safely."
        }
      ],
      "supervisorFlow": {
        "enabled": true,
        "title": "How Sales Supervisor Routes Lead Requests",
        "subtitle": "Lead flows through Sales Supervisor to qualification, enrichment, and routing agents",
        "agents": [
          { "id": "qualifier", "label": "Lead Qualifier", "sublabel": "Scoring", "icon": "ChartBarIcon" },
          { "id": "enrichment", "label": "Data Enricher", "sublabel": "Profile", "icon": "SparklesIcon" },
          { "id": "router", "label": "SDR Router", "sublabel": "Assignment", "icon": "ArrowPathIcon" }
        ],
        "tools": [
          { "id": "crm", "label": "CRM", "sublabel": "Salesforce", "icon": "ServerStackIcon" },
          { "id": "outreach", "label": "Outreach", "sublabel": "Messaging", "icon": "ChatBubbleLeftRightIcon" }
        ]
      }
    },
    {
      "id": 4,
      "slug": "finance-agent",
      "title": "Finance Agent",
      "category": "finance",
      "icon": "CurrencyDollarIcon",
      "navTitle": "Finance Agent",
      "navDescription": "Automate finance ops with reliable agents",
      "hero": {
        "headline": "Build Finance Ops Agents in TypeScript",
        "subtext": "Automate invoices, expenses, and reporting with policy-aware agents. Connect to ERP/accounting tools and trace everything in VoltOps.",
        "primaryCTA": "Start Building",
        "primaryCTALink": "/docs/",
        "secondaryCTA": "View Examples",
        "secondaryCTALink": "https://github.com/voltagent/voltagent/tree/main/examples",
        "businessTopics": ["Invoicing", "Expenses", "Reporting"],
        "systemCapabilities": ["ERP/Accounting", "Policy Engine", "Knowledge Base"]
      },
      "painPoints": [
        "Manual invoice and expense processing causes delays and errors",
        "Policies are not enforced consistently across teams",
        "Financial bots are opaque and hard to audit",
        "Complex integrations with ERP and banking APIs"
      ],
      "solutions": [
        "Code finance workflows and checks in TypeScript",
        "Connect ERP, banking, and payment platforms via APIs",
        "Use policy-aware agents to enforce thresholds and approvals",
        "Full audit trails and explanations with VoltOps"
      ],
      "features": [
        {
          "title": "Invoice Automation",
          "description": "Extract, validate, and route invoices with custom rules.",
          "icon": "DocumentTextIcon"
        },
        {
          "title": "Expense Review",
          "description": "Check receipts, enforce limits, and trigger approvals.",
          "icon": "ClipboardDocumentCheckIcon"
        },
        {
          "title": "Reconciliation",
          "description": "Match transactions across bank, ERP, and billing systems.",
          "icon": "ArrowsRightLeftIcon"
        },
        {
          "title": "Reporting & Audit",
          "description": "Generate reports and keep complete, explainable logs.",
          "icon": "DocumentMagnifyingGlassIcon"
        }
      ],
      "exampleAgents": [
        {
          "name": "AP Invoice Agent",
          "description": "Parses invoices, checks vendor terms, and posts to ERP."
        },
        {
          "name": "Expense Policy Agent",
          "description": "Flags out-of-policy spend and requests corrections."
        },
        {
          "name": "Cash Reconciliation Agent",
          "description": "Matches bank transactions to ledger entries and invoices."
        },
        {
          "name": "Revenue Analytics Agent",
          "description": "Builds MRR/ARR, churn, and cohort views for finance."
        },
        {
          "name": "Budget Variance Agent",
          "description": "Monitors budgets vs. actuals and alerts owners."
        },
        {
          "name": "Collections Agent",
          "description": "Sends reminders, proposes payment plans, and logs outcomes."
        }
      ],
      "capabilities": [
        "Extract data from PDFs, emails, and portals",
        "Validate vendors, PO numbers, and tax fields",
        "Enforce approval chains and spending limits",
        "Post journal entries to ERP systems",
        "Match payments and resolve discrepancies",
        "Generate monthly and quarterly reports",
        "Monitor KPIs like DSO and burn rate",
        "Detect anomalies and potential fraud patterns",
        "Integrate with payroll and billing systems",
        "Maintain audit-ready logs with explanations",
        "Support multi-entity and multi-currency rules",
        "Apply retention and redaction policies"
      ],
      "howItWorks": [
        {
          "step": 1,
          "title": "Build with VoltAgent",
          "description": "Define invoice, expense, and reporting flows in TypeScript."
        },
        {
          "step": 2,
          "title": "Connect Data & Tools",
          "description": "Integrate ERP, banking, billing, and payroll systems."
        },
        {
          "step": 3,
          "title": "Add Memory & RAG",
          "description": "Index policies, vendor terms, and past records for accuracy."
        },
        {
          "step": 4,
          "title": "Observe in VoltOps",
          "description": "Audit every action, approval, and data change end-to-end."
        }
      ],
      "supervisorFlow": {
        "enabled": true,
        "title": "How Finance Supervisor Routes Financial Requests",
        "subtitle": "Financial request flows through Finance Supervisor to specialized agents and systems",
        "agents": [
          { "id": "invoice", "label": "Invoice Agent", "sublabel": "Processing", "icon": "DocumentTextIcon" },
          { "id": "expense", "label": "Expense Agent", "sublabel": "Approval", "icon": "ReceiptPercentIcon" },
          { "id": "reporting", "label": "Reporting Agent", "sublabel": "Analytics", "icon": "ChartBarIcon" }
        ],
        "tools": [
          { "id": "erp", "label": "ERP System", "sublabel": "Financial Data", "icon": "ServerStackIcon" },
          { "id": "banking", "label": "Banking API", "sublabel": "Transactions", "icon": "BanknotesIcon" }
        ]
      }
    },
    {
      "id": 5,
      "slug": "development-agent",
      "title": "Development Agent",
      "category": "development",
      "icon": "CodeBracketSquareIcon",
      "navTitle": "Development Agent",
      "navDescription": "Build agents that understand your codebase",
      "hero": {
        "headline": "Build Dev Agents That Know Your Stack",
        "subtext": "Automate code reviews, CI/CD, and on-call help with agents that plug into your repos and tools. Full observability with VoltOps.",
        "primaryCTA": "Start Building",
        "primaryCTALink": "/docs/",
        "secondaryCTA": "View Examples",
        "secondaryCTALink": "https://github.com/voltagent/voltagent/tree/main/examples",
        "businessTopics": ["Code review", "CI/CD", "On-call"],
        "systemCapabilities": ["Repos", "Issue Tracker", "Observability Stack"]
      },
      "painPoints": [
        "Generic linters miss architecture and business logic issues",
        "Manual reviews delay merges and releases",
        "On-call triage is noisy and context is fragmented",
        "Tooling is scattered across CI, issues, and logs"
      ],
      "solutions": [
        "Program review and release logic in TypeScript",
        "Connect Git, CI/CD, issues, and observability tools",
        "Teach agents your patterns, policies, and playbooks",
        "Use VoltOps to debug false positives and latency"
      ],
      "features": [
        {
          "title": "Code Review Intelligence",
          "description": "Check architecture rules, performance hotspots, and security patterns.",
          "icon": "ShieldCheckIcon"
        },
        {
          "title": "CI/CD Automation",
          "description": "Gate merges, run tests, and promote releases with policy checks.",
          "icon": "Cog6ToothIcon"
        },
        {
          "title": "On-call Assistant",
          "description": "Summarize incidents, fetch logs/metrics, and suggest runbooks.",
          "icon": "BellAlertIcon"
        },
        {
          "title": "Traceable Decisions",
          "description": "Explain each finding and action through VoltOps traces.",
          "icon": "ChartBarIcon"
        }
      ],
      "exampleAgents": [
        {
          "name": "Architecture Compliance Agent",
          "description": "Verifies boundaries, dependencies, and API contracts."
        },
        {
          "name": "Performance Review Agent",
          "description": "Flags hotspots, proposes fixes, and tracks regressions."
        },
        {
          "name": "Security Scan Agent",
          "description": "Checks vulns, secrets, and auth flows across services."
        },
        {
          "name": "CI Gatekeeper Agent",
          "description": "Enforces test coverage, size limits, and release criteria."
        },
        {
          "name": "Issue Triage Agent",
          "description": "Deduplicates reports, extracts repro steps, and labels issues."
        },
        {
          "name": "On-call Runbook Agent",
          "description": "Correlates logs, metrics, and deploys; suggests next actions."
        }
      ],
      "capabilities": [
        "Analyze diffs with repo and history context",
        "Enforce architectural and security policies",
        "Generate actionable review comments",
        "Gate merges with CI checks and thresholds",
        "Monitor builds, tests, and deployment health",
        "Correlate logs, traces, and metrics for incidents",
        "Suggest fixes and link to runbooks",
        "Create and update issues with structured data",
        "Track technical debt and quality trends",
        "Support multi-language and monorepo setups",
        "Explain every flag with clear reasoning in VoltOps",
        "Integrate with GitHub, GitLab, Jira, and more"
      ],
      "howItWorks": [
        {
          "step": 1,
          "title": "Build with VoltAgent",
          "description": "Write review, CI, and on-call logic in TypeScript."
        },
        {
          "step": 2,
          "title": "Connect Data & Tools",
          "description": "Link repos, CI/CD, issue trackers, and observability."
        },
        {
          "step": 3,
          "title": "Add Memory & RAG",
          "description": "Index docs, ADRs, and runbooks for grounded guidance."
        },
        {
          "step": 4,
          "title": "Observe in VoltOps",
          "description": "Trace findings, false positives, and SLO impact."
        }
      ],
      "supervisorFlow": {
        "enabled": true,
        "title": "How Development Supervisor Routes Code Requests",
        "subtitle": "Development request flows through Code Supervisor to specialized review and automation agents",
        "agents": [
          { "id": "reviewer", "label": "Code Reviewer", "sublabel": "Analysis", "icon": "CodeBracketSquareIcon" },
          { "id": "security", "label": "Security Scanner", "sublabel": "Vulnerabilities", "icon": "ShieldCheckIcon" },
          { "id": "performance", "label": "Performance Agent", "sublabel": "Optimization", "icon": "ArrowTrendingUpIcon" }
        ],
        "tools": [
          { "id": "ci", "label": "CI/CD", "sublabel": "Build Pipeline", "icon": "ServerStackIcon" },
          { "id": "github", "label": "GitHub", "sublabel": "Repository", "icon": "CodeBracketIcon" }
        ]
      }
    }
  
]
